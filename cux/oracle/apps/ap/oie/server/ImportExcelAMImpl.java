package cux.oracle.apps.ap.oie.server;

import Show.oracle.apps.ak.show.server.SOBVORowImpl;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;

import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;

import oracle.apps.fnd.framework.server.OADBTransaction;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;

import oracle.jbo.domain.BlobDomain;

import oracle.jdbc.OracleCallableStatement;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ImportExcelAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public ImportExcelAMImpl() {
    }

    /**Container's getter for ImportExcelVO1
     */
    public ImportExcelVOImpl getImportExcelVO1() {
        
        return (ImportExcelVOImpl)findViewObject("ImportExcelVO1");
    }

    /**Container's getter for CUXCSVVO1
     */
    public CUXCSVVOImpl getCUXCSVVO1() {
        return (CUXCSVVOImpl)findViewObject("CUXCSVVO1");
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) {
        launchTester("cux.oracle.apps.ap.oie.server", /* package name */
      "ImportExcelAMLocal" /* Configuration Name */);
    }
    
    public byte[] export(){
        byte abyte0[] =null;
        CUXCSVVOImpl vo=this.getCUXCSVVO1();
        CUXCSVVORowImpl hRow=null;
        int rowcount = vo.getRowCount(); //取当前提取的记录集的记录数
        RowSetIterator deleteIter = vo.createRowSetIterator("deleteIter"); //建立记录集的指示器
        deleteIter.setRangeStart(0); //设置循环起点,相当于移动指针到第一条记录
        deleteIter.setRangeSize(rowcount); //设置循环次数
        // 第一步，创建一个webbook，对应一个Excel文件  
        HSSFWorkbook wb = new HSSFWorkbook();  
        // 第二步，在webbook中添加一个sheet,对应Excel文件中的sheet  
        HSSFSheet sheet = wb.createSheet("Test");  
        // 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制short  
        HSSFRow row = sheet.createRow((int) 0);  
        // 第四步，创建单元格，并设置值表头 设置表头居中  
        HSSFCellStyle style = wb.createCellStyle();  
        style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式  
        
        HSSFCell cell = row.createCell((short) 0);  
        cell.setCellValue("ID");  
        cell.setCellStyle(style);  
        cell = row.createCell((short) 1);  
        cell.setCellValue("Name");  
        cell.setCellStyle(style);  
        cell = row.createCell((short) 2);  
        cell.setCellValue("Email");  
        cell.setCellStyle(style);  
        cell = row.createCell((short) 3);  
        cell.setCellValue("Position");  
        cell.setCellStyle(style);  
         for (int i = 0; i < rowcount; i++)
         {
             row = sheet.createRow((int) i + 1);  
             hRow = (CUXCSVVORowImpl)deleteIter.getRowAtRangeIndex(i); //取得当前记录
              // 第四步，创建单元格，并设置值  
             row.createCell((short) 0).setCellValue( hRow.getEmployeeId().doubleValue());  
             row.createCell((short) 1).setCellValue(hRow.getEmployeeName());  
             row.createCell((short) 2).setCellValue(hRow.getEmailAddress());
             row.createCell((short) 3).setCellValue(hRow.getPosition());

          }
        // 第六步，将文件存到指定位置  
        try  
        {  
            //FileOutputStream fout = new FileOutputStream("E:/Test.xls");  
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            wb.write(os);
            abyte0 = os.toByteArray();
            //wb.write(fout);  
            os.close(); 
    
        }  
        catch (Exception e)  
        {  
            e.printStackTrace();  
        }  
        deleteIter.closeRowSetIterator();  
        return abyte0;
    }
    public void query(){
        CUXCSVVOImpl vo=this.getCUXCSVVO1();
        vo.setMaxFetchSize(-1);
        vo.executeQuery();
        
    }
}
